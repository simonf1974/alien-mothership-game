!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var i,r,o=(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),c=function(){function t(){this.currentHitPoints=0,this.hitPointReducAmt=0,this.startingHitpoints=0,this.isQueen=!1,this.id=""}return t.prototype.hit=function(){return this.currentHitPoints=Math.max(this.currentHitPoints-this.hitPointReducAmt,0),this.currentHitPoints},Object.defineProperty(t.prototype,"isAlive",{get:function(){return this.currentHitPoints>0},enumerable:!0,configurable:!0}),t.createNewObject=function(t){},t.createNewObjects=function(){for(var t=[],e=0;e<this.initialObjectNum;e++)t.push(this.createNewObject(e));return t},Object.defineProperty(t.prototype,"currentHitPointPct",{get:function(){return 0===this.currentHitPoints?.1:this.currentHitPoints/this.startingHitpoints},enumerable:!0,configurable:!0}),t.initialObjectNum=0,t}(),u=function(t){function e(e){var n=t.call(this)||this;return n.startingHitpoints=80,n.hitPointReducAmt=7,n.isQueen=!0,n.id="queen",n.currentHitPoints=n.startingHitpoints,n}return o(e,t),e.createNewObject=function(t){return new e(t)},e.initialObjectNum=1,e}(c),s=function(t){function e(e){var n=t.call(this)||this;return n.startingHitpoints=68,n.hitPointReducAmt=10,n.id="worker"+e,n.currentHitPoints=n.startingHitpoints,n}return o(e,t),e.createNewObject=function(t){return new e(t)},e.initialObjectNum=5,e}(c),a=function(t){function e(e){var n=t.call(this)||this;return n.startingHitpoints=60,n.hitPointReducAmt=12,n.id="drone"+e,n.currentHitPoints=n.startingHitpoints,n}return o(e,t),e.createNewObject=function(t){return new e(t)},e.initialObjectNum=8,e}(c),l=function(){function t(){this.aliens=[].concat(u.createNewObjects()).concat(s.createNewObjects()).concat(a.createNewObjects()),this.isGameOver=!1}return t.prototype.fire=function(){if(this.isGameOver)throw Error("Game is over. You should not be calling this method");var t=this.aliveAliens[Math.floor(Math.random()*this.aliveAliens.length)];return t.hit(),t.isAlive?this.isGameOver=!1:t.isQueen?this.isGameOver=!0:this.isGameOver=0===this.aliveAliens.length,t},Object.defineProperty(t.prototype,"aliveAliens",{get:function(){return this.aliens.filter((function(t){return t.isAlive}))},enumerable:!0,configurable:!0}),t}(),f=function(t,e,n,i){var r=document.getElementById(t),o=i?"Energy: "+e:" on sabbatical";r.getElementsByTagName("span")[1].innerText=o,r.getElementsByTagName("img")[0].style.opacity=n,r.style.color=i?"white":"red"},p=function(t){document.getElementById("fire-button").disabled=t,document.getElementById("game-over").innerText=t?"Game is over":"Game on!",document.getElementById("game-over").style.color=t?"red":"white"},m=function(){var t=r.fire();f(t.id,t.currentHitPoints,t.currentHitPointPct,t.isAlive),r.isGameOver&&p(!0)},d=function(t){r=new l,t&&(document.getElementById("fire-button").addEventListener("click",m),document.getElementById("restart-button").addEventListener("click",(function(){d(!1)})),function(){for(var t='<li id="queen"><span></span><span></span><img src="./images/jenna.jpg" alt=""></li>',e=0;e<s.initialObjectNum;e++)t+='<li id="worker'+e+'"><span></span><span></span><img src="./images/shea.jpg" alt=""></li>';for(e=0;e<a.initialObjectNum;e++)t+='<li id="drone'+e+'"><span></span><span></span><img src="./images/ollie.jpg" alt=""></li>';document.getElementsByClassName("grid")[0].innerHTML=t}()),r.aliens.forEach((function(t){return f(t.id,t.currentHitPoints,1,!0)})),p(!1)};d(!0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,